<html>

<head>

<title>Paint</title>

</head>

<body>
<h1>Giraffe Draw</h1>





<section>
    

  
    <meta name="viewport" content="width=device-width, initial-scale=1">
   <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js">
    </script>
    <script type="text/javascript">
      $(document).ready(function () {
         initialize();
         
         $("#refresh").click(function(){
           var sigCanvas = document.getElementById("canvasSignature");
           var context = sigCanvas.getContext("2d");
         
           context.fillStyle = "#ffffff";
           context.fillRect(0,0,sigCanvas.width, sigCanvas.height);
           
        });
        
        $("#brush-color").change(function(){
           var sigCanvas = document.getElementById("canvasSignature");
           var context = sigCanvas.getContext("2d");
           context.strokeStyle = $(this).val();
        });

        $("#line-width").change(function(){
           var sigCanvas = document.getElementById("canvasSignature");
           var context = sigCanvas.getContext("2d");
           context.lineWidth = $(this).val();
        });
      });
       
      // works out the X, Y position of the click inside the canvas from the X, Y position on the page
      function getPosition(mouseEvent, sigCanvas) {
         var x, y;
         if (mouseEvent.pageX != undefined && mouseEvent.pageY != undefined) {
            x = mouseEvent.pageX;
            y = mouseEvent.pageY;
         } else {
            x = mouseEvent.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            y = mouseEvent.clientY + document.body.scrollTop + document.documentElement.scrollTop;
         }
       
         return { X: x - sigCanvas.offsetLeft, Y: y - sigCanvas.offsetTop };
      }
       
      function initialize() {
         // get references to the canvas element as well as the 2D drawing context
         var sigCanvas = document.getElementById("canvasSignature");
         sigCanvas.height = window.innerHeight - 40;
         sigCanvas.width = window.innerWidth - 5;
          
         var context = sigCanvas.getContext("2d");
         context.strokeStyle = $('#brush-color').val();
         context.lineWidth = 2;
       
         // This will be defined on a TOUCH device such as iPad or Android, etc.
         var is_touch_device = 'ontouchstart' in document.documentElement;
       
         if (is_touch_device) {
            // create a drawer which tracks touch movements
            var drawer = {
               isDrawing: false,
               touchstart: function (coors) {
                  context.beginPath();
                  context.moveTo(coors.x, coors.y);
                  this.isDrawing = true;
               },
               touchmove: function (coors) {
                  if (this.isDrawing) {
                     context.lineTo(coors.x, coors.y);
                     context.stroke();
                  }
               },
               touchend: function (coors) {
                  if (this.isDrawing) {
                     this.touchmove(coors);
                     this.isDrawing = false;
                  }
               }
            };
       
            // create a function to pass touch events and coordinates to drawer
            function draw(event) {
       
               // get the touch coordinates.  Using the first touch in case of multi-touch
               var coors = {
                  x: event.targetTouches[0].pageX,
                  y: event.targetTouches[0].pageY
               };
       
               // Now we need to get the offset of the canvas location
               var obj = sigCanvas;
       
               if (obj.offsetParent) {
                  // Every time we find a new object, we add its offsetLeft and offsetTop to curleft and curtop.
                  do {
                     coors.x -= obj.offsetLeft;
                     coors.y -= obj.offsetTop;
                  }
                // The while loop can be "while (obj = obj.offsetParent)" only, which does return null
                // when null is passed back, but that creates a warning in some editors (i.e. VS2010).
                  while ((obj = obj.offsetParent) != null);
               }
       
               // pass the coordinates to the appropriate handler
               drawer[event.type](coors);
            }
       
      
            // attach the touchstart, touchmove, touchend event listeners.
            sigCanvas.addEventListener('touchstart', draw, false);
            sigCanvas.addEventListener('touchmove', draw, false);
            sigCanvas.addEventListener('touchend', draw, false);
       
            // prevent elastic scrolling
            sigCanvas.addEventListener('touchmove', function (event) {
               event.preventDefault();
            }, false); 
         }
         else {
       
            // start drawing when the mousedown event fires, and attach handlers to
            // draw a line to wherever the mouse moves to
            $("#canvasSignature").mousedown(function (mouseEvent) {
               var position = getPosition(mouseEvent, sigCanvas);
       
               context.moveTo(position.X, position.Y);
               context.beginPath();
       
               // attach event handlers
               $(this).mousemove(function (mouseEvent) {
                  drawLine(mouseEvent, sigCanvas, context);
               }).mouseup(function (mouseEvent) {
                  finishDrawing(mouseEvent, sigCanvas, context);
               }).mouseout(function (mouseEvent) {
                  finishDrawing(mouseEvent, sigCanvas, context);
               });
            });
       
         }
      }
       
      // draws a line to the x and y coordinates of the mouse event inside
      // the specified element using the specified context
      function drawLine(mouseEvent, sigCanvas, context) {
       
         var position = getPosition(mouseEvent, sigCanvas);
       
         context.lineTo(position.X, position.Y);
         context.stroke();
      }
       
      // draws a line from the last coordiantes in the path to the finishing
      // coordinates and unbind any event handlers which need to be preceded
      // by the mouse down event
      function finishDrawing(mouseEvent, sigCanvas, context) {
         // draw the line to the finishing coordinates
         drawLine(mouseEvent, sigCanvas, context);
       
         context.closePath();
       
         // unbind any events which could draw
         $(sigCanvas).unbind("mousemove")
                     .unbind("mouseup")
                     .unbind("mouseout");
      }
    </script>
  
  
    <div id="canvasDiv">
      <canvas id="canvasSignature" style="border:2px solid #000000;" width="1361" height="603"><h1>Giraffe Draw</h1></canvas>
      
      <table style="margin-left: 5px" border="0">
        <tbody><tr>
          <td>
            
            
            <button type="button" class="btn btn-sm btn-outline-danger" id="refresh">Clean</button>&nbsp;&nbsp;
          </td>
          <td>
            <label for="body">Brush Color</label>
            <input type="color" id="brush-color" name="body" value="#000">
          </td>

          <td>&nbsp;&nbsp;
            <label for="body">Brush Size</label>
            <select name="lineWidth" id="line-width">
              <option value="1">1</option>
              <option value="2" selected="">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10">10</option>
              <option value="11">11</option>
              <option value="12">12</option>
              <option value="13">13</option>
              <option value="14">14</option>
              <option value="15">15</option>
              <option value="16">16</option>
              <option value="17">17</option>
              <option value="18">18</option>
              <option value="19">19</option>
              <option value="20">20</option>
              <option value="100">100</option>
            
            </select>
          </td>
        </tr>
      </tbody></table>
       <hr>
    </div>
  
<br>
&copy;Internet

</section>
</body>

</html>
